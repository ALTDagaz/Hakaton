/************ CONFIG ************/
/*
  –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∏ –∏–º–µ–Ω–∞ –ª–∏—Å—Ç–æ–≤.
  SOURCE_SPREADSHEET_ID:
    - ID Google –¢–∞–±–ª–∏—Ü—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∞ (—Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É /d/ –∏ /edit),
    - –ª–∏–±–æ –ø–æ–ª–Ω—ã–π URL (ID –∏–∑–≤–ª–µ—á—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏),
    - –ª–∏–±–æ 'SELF', –µ—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ ‚Äî —ç—Ç–æ—Ç –∂–µ —Ñ–∞–π–ª.
*/
const SOURCE_SPREADSHEET_ID = '1PkCFO9fRC6kowEgO-TyVOhHIreOAiww4goqa6aga8pE';
const SOURCE_SHEET_NAME     = '–õ–∏—Å—Ç1';       // –ª–∏—Å—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫
const TARGET_SHEET_NAME     = '–õ–∏—Å—Ç1';       // –ª–∏—Å—Ç-–ø—Ä–∏—ë–º–Ω–∏–∫ (–≤ –≠–¢–û–ú —Ñ–∞–π–ª–µ)
const QUEUE_SHEET_NAME      = '_QueueBuffer';// —Å–∫—Ä—ã—Ç—ã–π –ª–∏—Å—Ç-–æ—á–µ—Ä–µ–¥—å (–≤ –≠–¢–û–ú —Ñ–∞–π–ª–µ)

// –ß–∞—Å—Ç–æ—Ç–∞ –∑–∞–ø–∏—Å–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤ –ø—Ä–∏—ë–º–Ω–∏–∫.
// –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 1, 5, 10, 15, 30 –º–∏–Ω—É—Ç –∏–ª–∏ –∫—Ä–∞—Ç–Ω–æ 60 (—á–∞—Å–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã).
const INTERVAL_MINUTES = 1;

// –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–∞–π–º–∏–Ω–≥–µ (–±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –ª–∏–º–∏—Ç–æ–≤).
const PRIME_READ_CHUNK_ROWS  = 1000;

/************ –°–•–ï–ú–ê –î–ê–ù–ù–´–• (–ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤) ************/
const REQUIRED_HEADERS = [
  'Date-time',
  'Day of the week',
  'Duty cycle',
  'Period of day',
  'ID ITP',
  'Nomer ITP',
  'Adres MKD',
  'FIAS MKD',
  'UNOM MKD',
  'ID HVS ITP',
  'ID ODPU GVS',
  'ID ODPU GVS ch1',
  'ID ODPU GVS ch2',
  'Znach HVS ITP',
  'Znach ODPU GVS  ch1',
  'Znach ODPU GVS  ch2',
  'Potrebl GVS',
  'Otkl potrebl HVS-GVS',
  'Predict Otkl potrebl HVS-GVS'
];

/************ STATE/PROPS ************/
const PROP_NS = 'HACKATHON_ROW_QUEUE';
const PROP_QUEUE_NEXT = 'queueNextRow';   // —Å–ª–µ–¥—É—é—â–∞—è –∫ –≤—ã–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–æ–∫–∞ –æ—á–µ—Ä–µ–¥–∏ (1-based, –≤–∫–ª—é—á–∞—è —à–∞–ø–∫—É)
const PROP_QUEUE_LAST = 'queueLastRow';   // –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –æ—á–µ—Ä–µ–¥–∏ (1-based)

/************ TELEGRAM CONFIG ************/
// –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram.
const TELEGRAM_ENABLED   = true;
// –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (—Å–æ–∑–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ @BotFather).
const TELEGRAM_BOT_TOKEN = '8229748963:AAE1-WEopOJEUYRHybJI5pXsvLu8uZb059g';
// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ chat_id –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ). –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º ‚Äî –±—É–¥–µ—Ç –∞–≤—Ç–æ—Å–±–æ—Ä.
const TELEGRAM_CHAT_IDS  = [
  1042557236
];
// –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ ('HTML' –∏–ª–∏ 'MarkdownV2').
const TELEGRAM_PARSE_MODE = 'HTML';

/************ TELEGRAM AUTOREG ************/
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ —á–∞—Ç—ã –∏–∑ getUpdates.
const TELEGRAM_AUTOREGISTER = true;

// –ö–ª—é—á–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (Script Properties) –¥–ª—è –∞–≤—Ç–æ—Å–±–æ—Ä–∞ chat_id –∏ —Å–º–µ—â–µ–Ω–∏—è getUpdates.
const PROP_TELEGRAM_CHAT_IDS_JSON  = 'TELEGRAM_CHAT_IDS_JSON';
const PROP_TELEGRAM_LAST_UPDATE_ID = 'TELEGRAM_LAST_UPDATE_ID';

/************ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ï –ú–ï–ù–Æ (Google Sheets) ************/
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('Hackathon Queue')
    .addItem('‚ñ∂ Setup & Prime (–∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –∏ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–π–º–µ—Ä)', 'setupAndPrime')
    .addSeparator()
    .addItem('‚Üì –í—ã–≥—Ä—É–∑–∏—Ç—å 1 —Å—Ç—Ä–æ–∫—É —Å–µ–π—á–∞—Å (—Ç–µ—Å—Ç)', 'testDequeueOnce_')
    .addSeparator()
    .addItem('üîç Debug: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏', 'debugQueueState_')
    .addItem('üõ† Debug: –ø–æ—á–∏–Ω–∏—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª–∏', 'fixQueuePointers_')
    .addSeparator()
    .addItem('‚è± –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –Ω–∞ 1 –º–∏–Ω—É—Ç—É', 'resetTriggerTo1Minute_')
    .addItem('‚è± –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –Ω–∞ 60 –º–∏–Ω—É—Ç', 'resetTriggerTo60Minute_')
    .addItem('üßπ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã', 'deleteAllTriggers')
    .addSeparator()
    .addItem('üìÑ Debug: –æ—Ç–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏—Å—Ç', 'debugSourceOpen_')
    .addSeparator()
    .addItem('ü§ñ Telegram: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–ø—Ä–æ—Å–∏—Ç—å getUpdates', 'telegramForcePoll_')
    .addItem('ü§ñ Telegram: –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ chat_id', 'telegramShowStoredChats_')
    .addToUi();
}

/************ –ì–õ–ê–í–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ************/
/*
  setupAndPrime():
  - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç/—Å–æ–∑–¥–∞—ë—Ç —à–∞–ø–∫—É –≤ —Ü–µ–ª–µ–≤–æ–º –ª–∏—Å—Ç–µ,
  - —Å–æ–±–∏—Ä–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–æ—á–∏—Å—Ç–∏–≤ —Å—Ç–∞—Ä—É—é),
  - –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç —Ç–∞–π–º–µ—Ä —Å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é INTERVAL_MINUTES.
*/
function setupAndPrime() {
  ensureTargetHeaders_();
  primeQueueFromSource_({ clearQueue: true });
  ensureOrResetTrigger_('dequeueOneHourly', INTERVAL_MINUTES);
  Logger.log(`–û—á–µ—Ä–µ–¥—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞. –¢–∞–π–º–µ—Ä –∫–∞–∂–¥—ã–µ ${INTERVAL_MINUTES} –º–∏–Ω.`);
}

/************ –í–´–ì–†–£–ó–ö–ê –ü–û –¢–ê–ô–ú–ï–†–£ (–ü–ê–ß–ö–ò –û–î–ù–û–ì–û Date-time) ************/
/*
  –ë–µ—Ä—ë—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤—Å–µ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º Date-time –∏
  –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –æ–¥–Ω–∏–º –±–ª–æ–∫–æ–º –≤ —Ü–µ–ª–µ–≤–æ–π –ª–∏—Å—Ç. –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è Anomaly.
  –ü—Ä–∏ Anomaly = 1 –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram.
*/
function dequeueOneHourly() {
  const lock = LockService.getScriptLock();
  lock.tryLock(30 * 1000);
  try {
    const ss = SpreadsheetApp.getActive();
    const queue = getOrCreateQueueSheet_(ss);
    const targetSheet = getExistingSheet_(ss, TARGET_SHEET_NAME, true);

    let next = getIntProp_(PROP_QUEUE_NEXT, 2);
    const last = getIntProp_(PROP_QUEUE_LAST, 1);
    if (next > last) {
      Logger.log('–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Äî –Ω–µ—á–µ–≥–æ –≤—ã–≥—Ä—É–∂–∞—Ç—å.');
      return;
    }

    // –ß–∏—Ç–∞–µ–º —Ö–≤–æ—Å—Ç –æ—á–µ—Ä–µ–¥–∏, –Ω–∞—á–∏–Ω–∞—è —Å next.
    const remainRows = last - next + 1;
    const remainVals = queue.getRange(next, 1, remainRows, REQUIRED_HEADERS.length).getValues();
    if (remainVals.length === 0) {
      Logger.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —É–∫–∞–∑–∞—Ç–µ–ª—è.');
      return;
    }

    // –ö–ª—é—á Date-time –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–∞—á–∫–∏ (–ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ‚Äî —Å–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π).
    const dtKey0 = dateKey_(remainVals[0][0]);

    // –†–∞–∑–º–µ—Ä –ø–∞—á–∫–∏ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ä—è–¥ —Å—Ç—Ä–æ–∫ —Å —Ç–µ–º –∂–µ Date-time.
    let batchSize = 0;
    for (let i = 0; i < remainVals.length; i++) {
      const k = dateKey_(remainVals[i][0]);
      if (k === dtKey0) batchSize++; else break;
    }
    const batch = remainVals.slice(0, batchSize);

    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —à–∞–ø–∫—É/–ø–æ—Ä—è–¥–æ–∫ —É –ø—Ä–∏—ë–º–Ω–∏–∫–∞.
    ensureTargetHeaders_();

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–∞—á–∫—É –∑–∞ –æ–¥–∏–Ω –≤—ã–∑–æ–≤.
    const startWriteRow = targetSheet.getLastRow() + 1;
    targetSheet.getRange(startWriteRow, 1, batch.length, REQUIRED_HEADERS.length).setValues(batch);

    // –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º Anomaly –¥–ª—è –≤—Å–µ–π –ø–∞—á–∫–∏.
    const headers = readHeaders_(targetSheet);
    const idxOtklT = headers.indexOf('Otkl potrebl HVS-GVS');
    const idxAnomT = headers.indexOf('Anomaly');
    if (idxOtklT !== -1 && idxAnomT !== -1) {
      const otklRange = targetSheet.getRange(startWriteRow, idxOtklT + 1, batch.length, 1).getValues();
      const outAnom = otklRange.map(r => [Number(r[0]) > 0.1 ? 1 : 0]);
      targetSheet.getRange(startWriteRow, idxAnomT + 1, batch.length, 1).setValues(outAnom);
    } else {
      Logger.log('–ù–µ –Ω–∞–π–¥–µ–Ω "Anomaly" –∏–ª–∏ "Otkl potrebl HVS-GVS" –≤ –ø—Ä–∏—ë–º–Ω–∏–∫–µ ‚Äî –æ—Ç–º–µ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.');
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram –¥–ª—è —Å—Ç—Ä–æ–∫ –ø–∞—á–∫–∏, –≥–¥–µ Anomaly = 1.
    const idxOtklQ = REQUIRED_HEADERS.indexOf('Otkl potrebl HVS-GVS');
    const idxITP   = REQUIRED_HEADERS.indexOf('ID ITP');
    const idxNum   = REQUIRED_HEADERS.indexOf('Nomer ITP');
    const idxAddr  = REQUIRED_HEADERS.indexOf('Adres MKD');
    const idxFIAS  = REQUIRED_HEADERS.indexOf('FIAS MKD');
    const idxUNOM  = REQUIRED_HEADERS.indexOf('UNOM MKD');
    const idxHVS   = REQUIRED_HEADERS.indexOf('ID HVS ITP');
    const idxGVS   = REQUIRED_HEADERS.indexOf('ID ODPU GVS');
    const idxZnachH= REQUIRED_HEADERS.indexOf('Znach HVS ITP');
    const idxPotr  = REQUIRED_HEADERS.indexOf('Potrebl GVS');

    const fileUrl = ss.getUrl();
    const gid = targetSheet.getSheetId();

    for (let i = 0; i < batch.length; i++) {
      const row = batch[i];
      const otklVal = Number(row[idxOtklQ]);
      const anomaly = otklVal > 0.1 ? 1 : 0;
      if (anomaly !== 1) continue;

      const lastRowJustWritten = startWriteRow + i;
      const link = fileUrl + '#gid=' + gid + '&range=A' + lastRowJustWritten;

      const lines = [
        '‚ö†Ô∏è <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è</b>',
        '',
        '<b>–î–∞—Ç–∞-–≤—Ä–µ–º—è:</b> ' + escHtml_(row[0]),
        '<b>–ê–¥—Ä–µ—Å:</b> ' + escHtml_(row[idxAddr]),
        '<b>FIAS / UNOM:</b> ' + escHtml_(row[idxFIAS]) + ' / ' + escHtml_(row[idxUNOM]),
        '<b>–ù–æ–º–µ—Ä –ò–¢–ü / ID –ò–¢–ü:</b> ' + escHtml_(row[idxNum]) + ' / ' + escHtml_(row[idxITP]),
        '<b>ID –•–í–° –ò–¢–ü / ID –û–î–ü–£ –ì–í–°:</b> ' + escHtml_(row[idxHVS]) + ' / ' + escHtml_(row[idxGVS]),
        '<b>–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –•–í–° (–º¬≥):</b> ' + escHtml_(row[idxZnachH]),
        '<b>–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ì–í–° (–º¬≥):</b> ' + escHtml_(row[idxPotr]),
        '<b>–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –•–í–°-–ì–í–°:</b> ' + escHtml_(formatPercent_(otklVal))
      ];
      sendTelegramMessage_(lines.join('\n'));
    }

    // –°–¥–≤–∏–≥–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Ä–∞–∑–º–µ—Ä –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–π –ø–∞—á–∫–∏.
    setProp_(PROP_QUEUE_NEXT, String(next + batchSize));
    Logger.log(`–í—ã–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${batchSize} (Date-time=${dtKey0}).`);

  } catch (e) {
    notifyError_(e);
    throw e;
  } finally {
    try { lock.releaseLock(); } catch (_) {}
  }
}

/************ –ü–†–ê–ô–ú–ò–ù–ì –û–ß–ï–†–ï–î–ò ************/
/*
  –°–æ–±–∏—Ä–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤ —Å–∫—Ä—ã—Ç—ã–π –ª–∏—Å—Ç _QueueBuffer.
  –í—Å–µ —Å—Ç—Ä–æ–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∫ REQUIRED_HEADERS –∏ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –ø–æ Date-time –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é,
  —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –≤—ã–≥—Ä—É–∂–∞—Ç—å –ø–∞—á–∫–∞–º–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º Date-time.
*/
function primeQueueFromSource_({ clearQueue }) {
  const sourceSS = getSourceSpreadsheet_();
  const sourceSheet = getExistingSheet_(sourceSS, SOURCE_SHEET_NAME);

  const ss = SpreadsheetApp.getActive();
  const queue = getOrCreateQueueSheet_(ss);

  const srcHeaders = readHeaders_(sourceSheet);
  validateRequiredHeaders_(srcHeaders, '–∏—Å—Ç–æ—á–Ω–∏–∫');
  const headerIndexMap = toHeaderIndexMap_(srcHeaders);

  if (clearQueue) {
    queue.clear();
    queue.getRange(1, 1, 1, REQUIRED_HEADERS.length).setValues([REQUIRED_HEADERS]);
    queue.hideSheet();
  } else {
    if (queue.getLastRow() === 0) {
      queue.getRange(1, 1, 1, REQUIRED_HEADERS.length).setValues([REQUIRED_HEADERS]);
      queue.hideSheet();
    } else {
      const qh = readHeaders_(queue);
      validateRequiredHeaders_(qh, '–æ—á–µ—Ä–µ–¥—å');
    }
  }

  const lastSourceRow = sourceSheet.getLastRow();
  if (lastSourceRow <= 1) {
    setProp_(PROP_QUEUE_NEXT, '2');
    setProp_(PROP_QUEUE_LAST, '1');
    Logger.log('–í –∏—Å—Ç–æ—á–Ω–∏–∫–µ —Ç–æ–ª—å–∫–æ —à–∞–ø–∫–∞ ‚Äî –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.');
    return;
  }

  let srcStartRow = 2;
  let qWriteRow = queue.getLastRow() + 1;

  while (srcStartRow <= lastSourceRow) {
    const toRead = Math.min(PRIME_READ_CHUNK_ROWS, lastSourceRow - srcStartRow + 1);
    if (toRead <= 0) break;

    const block = sourceSheet.getRange(srcStartRow, 1, toRead, sourceSheet.getLastColumn()).getValues();

    const prepared = block.map(row => REQUIRED_HEADERS.map(h => {
      const idx = headerIndexMap[h];
      const raw = (idx != null) ? row[idx] : '';
      return (h === 'Date-time') ? parseDateTimeOrKeep_(raw) : raw;
    }));

    queue.getRange(qWriteRow, 1, prepared.length, REQUIRED_HEADERS.length).setValues(prepared);

    srcStartRow += toRead;
    qWriteRow   += prepared.length;

    SpreadsheetApp.flush();
  }

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–∏ –ø–æ Date-time (—à–∞–ø–∫–∞ ‚Äî 1-—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞–µ—Ç—Å—è).
  const totalRows = queue.getLastRow();
  if (totalRows > 2) {
    const dataRange = queue.getRange(2, 1, totalRows - 1, REQUIRED_HEADERS.length);
    dataRange.sort({ column: 1, ascending: true });
  }

  setProp_(PROP_QUEUE_NEXT, '2');
  setProp_(PROP_QUEUE_LAST, String(queue.getLastRow()));
  Logger.log(`–û—á–µ—Ä–µ–¥—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: ${queue.getLastRow() - 1} —Å—Ç—Ä–æ–∫ (–±–µ–∑ —à–∞–ø–∫–∏).`);
}

/************ –®–ê–ü–ö–ò/–ü–û–†–Ø–î–û–ö ************/
/*
  ensureTargetHeaders_():
  - –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ —à–∞–ø–∫–∏ –≤ —Ü–µ–ª–µ–≤–æ–º –ª–∏—Å—Ç–µ,
  - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ REQUIRED_HEADERS –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç,
  - –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫–∏, —á—Ç–æ–±—ã —É–ø–æ—Ä—è–¥–æ—á–∏—Ç—å –ø–µ—Ä–≤—ã–µ N —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–æ REQUIRED_HEADERS.
  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–æ–ª–±—Ü—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–ø—Ä–∞–≤–∞, –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è.
*/
function ensureTargetHeaders_() {
  const ss = SpreadsheetApp.getActive();
  const targetSheet = getExistingSheet_(ss, TARGET_SHEET_NAME, true);

  if (targetSheet.getLastRow() === 0) {
    targetSheet.appendRow(REQUIRED_HEADERS);
    return;
  }
  const tgtHeaders = readHeaders_(targetSheet);
  validateRequiredHeaders_(tgtHeaders, '–ø—Ä–∏—ë–º–Ω–∏–∫');
  alignTargetHeaderOrderIfNeeded_(targetSheet, tgtHeaders);
}

function readHeaders_(sheet) {
  if (!sheet || sheet.getLastRow() < 1) return [];
  return sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0].map(v => String(v).trim());
}

function validateRequiredHeaders_(headers, whereLabel) {
  const set = new Set(headers.map(h => h.trim()));
  const missing = REQUIRED_HEADERS.filter(h => !set.has(h));
  if (missing.length) {
    throw new Error(`–í ${whereLabel} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: ${missing.join(', ')}`);
  }
}

function alignTargetHeaderOrderIfNeeded_(sheet, currentHeaders) {
  const desired = REQUIRED_HEADERS;
  const colCount = sheet.getLastColumn();
  if (colCount < desired.length) return;

  for (let targetPos = 0; targetPos < desired.length; targetPos++) {
    const want = desired[targetPos];
    const current = readHeaders_(sheet);
    if (current[targetPos] === want) continue;

    const fromIndex = current.indexOf(want);
    if (fromIndex === -1) continue;

    const fromCol = fromIndex + 1;
    const toCol   = targetPos + 1;
    sheet.moveColumns(sheet.getRange(1, fromCol, sheet.getMaxRows(), 1), toCol);
  }
}

/************ –¢–†–ò–ì–ì–ï–†–´ ************/
/*
  –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π
  —Å –ø–µ—Ä–∏–æ–¥–æ–º INTERVAL_MINUTES. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã: 1,5,10,15,30 –º–∏–Ω—É—Ç –∏–ª–∏ –∫—Ä–∞—Ç–Ω–æ 60.
*/
function ensureOrResetTrigger_(handlerName, intervalMinutes) {
  ScriptApp.getProjectTriggers()
    .filter(t => t.getHandlerFunction() === handlerName)
    .forEach(t => ScriptApp.deleteTrigger(t));

  const minutes = Number(intervalMinutes);
  if (!Number.isFinite(minutes) || minutes <= 0) {
    throw new Error('INTERVAL_MINUTES –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.');
  }

  const allowedMinuteSteps = [1, 5, 10, 15, 30];
  const tb = ScriptApp.newTrigger(handlerName).timeBased();

  if (minutes % 60 === 0) {
    const hours = Math.max(1, Math.floor(minutes / 60));
    tb.everyHours(hours).create();
    return;
  }

  if (!allowedMinuteSteps.includes(minutes)) {
    throw new Error(`–†–∞–∑—Ä–µ—à–µ–Ω—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã: ${allowedMinuteSteps.join(', ')} –º–∏–Ω—É—Ç –∏–ª–∏ –∫—Ä–∞—Ç–Ω–æ 60.`);
  }

  tb.everyMinutes(minutes).create();
}

/************ HELPERS (–æ–±—â–∏–µ) ************/
function getExistingSheet_(ss, name, createIfMissing) {
  let s = ss.getSheetByName(name);
  if (!s && createIfMissing) s = ss.insertSheet(name);
  if (!s) throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω –ª–∏—Å—Ç "${name}"`);
  return s;
}

function getOrCreateQueueSheet_(ss) {
  let q = ss.getSheetByName(QUEUE_SHEET_NAME);
  if (!q) {
    q = ss.insertSheet(QUEUE_SHEET_NAME);
    q.getRange(1, 1, 1, REQUIRED_HEADERS.length).setValues([REQUIRED_HEADERS]);
    q.hideSheet();
  }
  return q;
}

function toHeaderIndexMap_(headers) {
  const m = {};
  headers.forEach((h, i) => (m[h] = i));
  return m;
}

// –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É "YYYY-MM-DD HH:mm:ss" (–∏–ª–∏ —Å 'T') –≤ Date; –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
function parseDateTimeOrKeep_(value) {
  if (Object.prototype.toString.call(value) === '[object Date]') return value;
  if (typeof value !== 'string') return value;
  const s = value.trim().replace('T', ' ');
  const m = s.match(/^(\d{4})-(\d{2})-(\d{2})[ T](\d{2}):(\d{2}):(\d{2})$/);
  if (!m) return value;
  const [_, Y, M, D, h, mnt, sec] = m;
  return new Date(Number(Y), Number(M) - 1, Number(D), Number(h), Number(mnt), Number(sec), 0);
}

function getIntProp_(key, defVal) {
  const sp = PropertiesService.getScriptProperties();
  const v = sp.getProperty(`${PROP_NS}.${key}`);
  const n = parseInt(v, 10);
  return Number.isFinite(n) ? n : defVal;
}

function setProp_(key, val) {
  PropertiesService.getScriptProperties().setProperty(`${PROP_NS}.${key}`, val);
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ (–ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å e-mail/Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è).
function notifyError_(e) {
  Logger.log('Error: ' + (e && e.stack ? e.stack : e));
}

/************ –ò–°–¢–û–ß–ù–ò–ö (–æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ ID/URL/SELF —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏) ************/
function getSourceSpreadsheet_() {
  const raw = String(SOURCE_SPREADSHEET_ID || '').trim();
  if (!raw) {
    throw new Error('SOURCE_SPREADSHEET_ID –ø—É—Å—Ç. –£–∫–∞–∂–∏—Ç–µ ID, –ø–æ–ª–Ω—ã–π URL –∏–ª–∏ "SELF".');
  }
  if (raw.toUpperCase() === 'SELF') {
    return SpreadsheetApp.getActive();
  }

  let id = raw;
  if (/^https?:\/\//i.test(raw)) {
    const m = raw.match(/\/d\/([a-zA-Z0-9-_]+)/);
    if (!m) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–æ–∂–∏–¥–∞–µ—Ç—Å—è .../d/<ID>/edit).');
    id = m[1];
  }

  try {
    const file = DriveApp.getFileById(id);
    const mime = file.getMimeType();
    const isSheet = mime === MimeType.GOOGLE_SHEETS || mime === 'application/vnd.google-apps.spreadsheet';
    if (!isSheet) throw new Error('–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Google –¢–∞–±–ª–∏—Ü–µ–π. –°–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—ë ID.');
  } catch (e) {
    throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π ID: ' + id + '. –î–µ—Ç–∞–ª–∏: ' + e);
  }

  return SpreadsheetApp.openById(id);
}

/************ –°–ï–†–í–ò–°–ù–´–ï –£–¢–ò–õ–ò–¢–´ ************/
function deleteAllTriggers() {
  ScriptApp.getProjectTriggers().forEach(t => ScriptApp.deleteTrigger(t));
  Logger.log('–í—Å–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã —É–¥–∞–ª–µ–Ω—ã.');
}

function debugSourceOpen_() {
  const ss = getSourceSpreadsheet_();
  const names = ss.getSheets().map(s => s.getName());
  Logger.log('–ò—Å—Ç–æ—á–Ω–∏–∫ –æ—Ç–∫—Ä—ã—Ç. –õ–∏—Å—Ç—ã: ' + names.join(', '));
  const srcSheet = ss.getSheetByName(SOURCE_SHEET_NAME);
  if (!srcSheet) throw new Error('–í –∏—Å—Ç–æ—á–Ω–∏–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–∏—Å—Ç "' + SOURCE_SHEET_NAME + '".');
  Logger.log('–õ–∏—Å—Ç –Ω–∞–π–¥–µ–Ω. –°—Ç—Ä–æ–∫: ' + srcSheet.getLastRow() + ', –∫–æ–ª.: ' + srcSheet.getLastColumn());
}

function debugQueueState_() {
  const ss = SpreadsheetApp.getActive();
  const q = ss.getSheetByName(QUEUE_SHEET_NAME);
  if (!q) {
    Logger.log('–õ–∏—Å—Ç –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ' + QUEUE_SHEET_NAME);
    return;
  }
  const rows = q.getLastRow();
  const cols = q.getLastColumn();
  const next = getIntProp_(PROP_QUEUE_NEXT, 0);
  const last = getIntProp_(PROP_QUEUE_LAST, 0);
  Logger.log(`QUEUE SHEET: rows=${rows}, cols=${cols}, next=${next}, last=${last}`);
  if (rows >= 2) {
    const sample = q.getRange(2, 1, Math.min(3, rows - 1), Math.min(5, cols)).getValues();
    Logger.log('–ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –æ—á–µ—Ä–µ–¥–∏ (—á–∞—Å—Ç–∏—á–Ω–æ): ' + JSON.stringify(sample));
  } else {
    Logger.log('–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ —à–∞–ø–∫–∞ –∏–ª–∏ –ø—É—Å—Ç–æ).');
  }
}

function testDequeueOnce_() {
  dequeueOneHourly();
  Logger.log('–í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ä–∞–∑–æ–≤–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ 1 ¬´–ø–∞—á–∫–∏¬ª –ø–æ Date-time.');
}

function fixQueuePointers_() {
  const ss = SpreadsheetApp.getActive();
  const q = ss.getSheetByName(QUEUE_SHEET_NAME);
  if (!q) throw new Error('–õ–∏—Å—Ç –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ' + QUEUE_SHEET_NAME);
  const rows = q.getLastRow();
  if (rows <= 1) {
    setProp_(PROP_QUEUE_NEXT, '2');
    setProp_(PROP_QUEUE_LAST, '1');
    Logger.log('–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞. next=2, last=1');
  } else {
    setProp_(PROP_QUEUE_NEXT, '2');
    setProp_(PROP_QUEUE_LAST, String(rows));
    Logger.log(`–£–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã. next=2, last=${rows}`);
  }
}

function resetTriggerTo1Minute_() {
  ScriptApp.getProjectTriggers()
    .filter(t => t.getHandlerFunction() === 'dequeueOneHourly')
    .forEach(t => ScriptApp.deleteTrigger(t));

  ScriptApp.newTrigger('dequeueOneHourly')
    .timeBased()
    .everyMinutes(1)
    .create();

  Logger.log('–¢—Ä–∏–≥–≥–µ—Ä ¬´–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É¬ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
}

function resetTriggerTo60Minute_() {
  ScriptApp.getProjectTriggers()
    .filter(t => t.getHandlerFunction() === 'dequeueOneHourly')
    .forEach(t => ScriptApp.deleteTrigger(t));

  ScriptApp.newTrigger('dequeueOneHourly')
    .timeBased()
    .everyHours(1)
    .create();

  Logger.log('–¢—Ä–∏–≥–≥–µ—Ä ¬´–∫–∞–∂–¥—ã–π —á–∞—Å¬ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
}

/************ TELEGRAM: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏ –∞–≤—Ç–æ-—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è chat_id ************/
function sendTelegramMessage_(text) {
  if (!TELEGRAM_ENABLED) return;
  if (!TELEGRAM_BOT_TOKEN || TELEGRAM_BOT_TOKEN.indexOf(':') === -1) {
    Logger.log('TELEGRAM: —Ç–æ–∫–µ–Ω –Ω–µ –∑–∞–¥–∞–Ω/–Ω–µ–≤–µ—Ä–µ–Ω.');
    return;
  }

  // –¢–µ–∫—É—â–∏–µ chat_id: —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ + –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞.
  const storedIds = getStoredChatIds_();
  const manualIds = Array.isArray(TELEGRAM_CHAT_IDS) ? TELEGRAM_CHAT_IDS.map(String) : [];
  let chatIds = Array.from(new Set([...storedIds, ...manualIds]));

  // –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ‚Äî –∞–≤—Ç–æ-–ø–æ–¥—Ö–≤–∞—Ç –Ω–æ–≤—ã—Ö chat_id.
  if (TELEGRAM_AUTOREGISTER) {
    try {
      const refreshed = pollTelegramUpdatesAndRegister_();
      chatIds = Array.from(new Set([...chatIds, ...refreshed]));
    } catch (e) {
      Logger.log('TELEGRAM: –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ-—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + (e && e.stack ? e.stack : e));
    }
  }

  if (!chatIds.length) {
    Logger.log('TELEGRAM: –Ω–µ—Ç chat_id. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî id –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.');
    return;
  }

  const url = 'https://api.telegram.org/bot' + TELEGRAM_BOT_TOKEN + '/sendMessage';

  chatIds.forEach(chatId => {
    try {
      const params = {
        method: 'post',
        payload: {
          chat_id: String(chatId),
          text: text,
          parse_mode: TELEGRAM_PARSE_MODE,
          disable_web_page_preview: true
        },
        muteHttpExceptions: true
      };
      const res = UrlFetchApp.fetch(url, params);
      const code = res.getResponseCode();
      if (code >= 300) {
        Logger.log('TELEGRAM: HTTP ' + code + ' ‚Üí ' + res.getContentText());
      } else {
        Logger.log('TELEGRAM: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ' + chatId);
      }
    } catch (e) {
      Logger.log('TELEGRAM: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ ' + chatId + ': ' + (e && e.stack ? e.stack : e));
    }
  });
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
function escHtml_(s) {
  if (s == null) return '';
  return String(s)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}

// –§–æ—Ä–º–∞—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–∑ –¥–æ–ª–∏ (0.123 ‚Üí 12.3%).
function formatPercent_(val) {
  const num = Number(val);
  if (!isFinite(num)) return String(val);
  return (num * 100).toFixed(1) + '%';
}

// –ß—Ç–µ–Ω–∏–µ/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ chat_id –≤ Script Properties.
function getStoredChatIds_() {
  const sp = PropertiesService.getScriptProperties();
  const raw = sp.getProperty(PROP_TELEGRAM_CHAT_IDS_JSON);
  if (!raw) return [];
  try {
    const arr = JSON.parse(raw);
    return Array.isArray(arr) ? Array.from(new Set(arr.map(String))) : [];
  } catch (e) {
    Logger.log('TELEGRAM: –ø–æ–≤—Ä–µ–∂–¥—ë–Ω —Å–ø–∏—Å–æ–∫ chat_id. –°–±—Ä–∞—Å—ã–≤–∞—é. ' + e);
    sp.deleteProperty(PROP_TELEGRAM_CHAT_IDS_JSON);
    return [];
  }
}

function saveStoredChatIds_(ids) {
  const uniq = Array.from(new Set((ids || []).map(String)));
  PropertiesService.getScriptProperties()
    .setProperty(PROP_TELEGRAM_CHAT_IDS_JSON, JSON.stringify(uniq));
  return uniq;
}

// –°–º–µ—â–µ–Ω–∏–µ getUpdates.
function getTelegramLastUpdateId_() {
  const v = PropertiesService.getScriptProperties().getProperty(PROP_TELEGRAM_LAST_UPDATE_ID);
  const n = parseInt(v, 10);
  return Number.isFinite(n) ? n : null;
}
function setTelegramLastUpdateId_(id) {
  if (Number.isFinite(id)) {
    PropertiesService.getScriptProperties().setProperty(PROP_TELEGRAM_LAST_UPDATE_ID, String(id));
  }
}

/*
  pollTelegramUpdatesAndRegister_():
  - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –∞–ø–¥–µ–π—Ç—ã Telegram (—Å —É—á—ë—Ç–æ–º offset),
  - –∏–∑–≤–ª–µ–∫–∞–µ—Ç chat.id –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π,
  - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ chat_id –≤ Script Properties.
*/
function pollTelegramUpdatesAndRegister_() {
  if (!TELEGRAM_ENABLED) return getStoredChatIds_();
  if (!TELEGRAM_BOT_TOKEN || TELEGRAM_BOT_TOKEN.indexOf(':') === -1) return getStoredChatIds_();

  const url = 'https://api.telegram.org/bot' + TELEGRAM_BOT_TOKEN + '/getUpdates';
  const payload = { timeout: 0 };
  const lastId = getTelegramLastUpdateId_();
  if (Number.isFinite(lastId)) payload.offset = lastId + 1;

  const res = UrlFetchApp.fetch(url, { method: 'post', payload, muteHttpExceptions: true });
  if (res.getResponseCode() >= 300) {
    Logger.log('TELEGRAM getUpdates HTTP ' + res.getResponseCode() + ': ' + res.getContentText());
    return getStoredChatIds_();
  }

  const data = JSON.parse(res.getContentText());
  if (!data.ok) return getStoredChatIds_();

  const current = new Set(getStoredChatIds_().map(String));
  let maxUpdateId = lastId || null;

  const considerChat = (chat) => {
    if (!chat || chat.id == null) return;
    current.add(String(chat.id)); // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è private, group, supergroup, channel.
  };

  (data.result || []).forEach(upd => {
    if (Number.isFinite(upd.update_id)) {
      if (maxUpdateId == null || upd.update_id > maxUpdateId) maxUpdateId = upd.update_id;
    }
    if (upd.message && upd.message.chat) considerChat(upd.message.chat);
    if (upd.edited_message && upd.edited_message.chat) considerChat(upd.edited_message.chat);
    if (upd.channel_post && upd.channel_post.chat) considerChat(upd.channel_post.chat);
    if (upd.edited_channel_post && upd.edited_channel_post.chat) considerChat(upd.edited_channel_post.chat);
    if (upd.my_chat_member && upd.my_chat_member.chat) considerChat(upd.my_chat_member.chat);
    if (upd.chat_member && upd.chat_member.chat) considerChat(upd.chat_member.chat);
  });

  if (maxUpdateId != null) setTelegramLastUpdateId_(maxUpdateId);
  const saved = saveStoredChatIds_(Array.from(current));
  Logger.log('TELEGRAM: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã chat_id: ' + saved.join(', '));
  return saved;
}

// –°–ª—É–∂–µ–±–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã Telegram.
function telegramForcePoll_() {
  const ids = pollTelegramUpdatesAndRegister_();
  Logger.log('Force poll ‚Üí chat_ids: ' + ids.join(', '));
}
function telegramShowStoredChats_() {
  Logger.log('Stored chat_ids: ' + getStoredChatIds_().join(', '));
}

/************ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞—Ç ************/
// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—ã –≤ –∫–ª—é—á —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (timestamp). –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–æ—Å—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É.
function dateKey_(v) {
  if (Object.prototype.toString.call(v) === '[object Date]') {
    return String(v.getTime());
  }
  if (typeof v === 'number') return String(v);
  if (typeof v === 'string') {
    const parsed = parseDateTimeOrKeep_(v);
    if (Object.prototype.toString.call(parsed) === '[object Date]') {
      return String(parsed.getTime());
    }
    return v.trim();
  }
  return String(v);
}
